// Code generated by MockGen. DO NOT EDIT.
// Source: subject_action_group_resource.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/service/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSubjectActionGroupResourceService is a mock of SubjectActionGroupResourceService interface.
type MockSubjectActionGroupResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectActionGroupResourceServiceMockRecorder
}

// MockSubjectActionGroupResourceServiceMockRecorder is the mock recorder for MockSubjectActionGroupResourceService.
type MockSubjectActionGroupResourceServiceMockRecorder struct {
	mock *MockSubjectActionGroupResourceService
}

// NewMockSubjectActionGroupResourceService creates a new mock instance.
func NewMockSubjectActionGroupResourceService(ctrl *gomock.Controller) *MockSubjectActionGroupResourceService {
	mock := &MockSubjectActionGroupResourceService{ctrl: ctrl}
	mock.recorder = &MockSubjectActionGroupResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectActionGroupResourceService) EXPECT() *MockSubjectActionGroupResourceServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateWithTx mocks base method.
func (m *MockSubjectActionGroupResourceService) CreateOrUpdateWithTx(tx *sqlx.Tx, subjectPK, actionPK, groupPK, expiredAt int64, resources map[int64][]string) (types.SubjectActionGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateWithTx", tx, subjectPK, actionPK, groupPK, expiredAt, resources)
	ret0, _ := ret[0].(types.SubjectActionGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateWithTx indicates an expected call of CreateOrUpdateWithTx.
func (mr *MockSubjectActionGroupResourceServiceMockRecorder) CreateOrUpdateWithTx(tx, subjectPK, actionPK, groupPK, expiredAt, resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateWithTx", reflect.TypeOf((*MockSubjectActionGroupResourceService)(nil).CreateOrUpdateWithTx), tx, subjectPK, actionPK, groupPK, expiredAt, resources)
}

// DeleteGroupResourceWithTx mocks base method.
func (m *MockSubjectActionGroupResourceService) DeleteGroupResourceWithTx(tx *sqlx.Tx, subjectPK, actionPK, groupPK int64) (types.SubjectActionGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupResourceWithTx", tx, subjectPK, actionPK, groupPK)
	ret0, _ := ret[0].(types.SubjectActionGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupResourceWithTx indicates an expected call of DeleteGroupResourceWithTx.
func (mr *MockSubjectActionGroupResourceServiceMockRecorder) DeleteGroupResourceWithTx(tx, subjectPK, actionPK, groupPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupResourceWithTx", reflect.TypeOf((*MockSubjectActionGroupResourceService)(nil).DeleteGroupResourceWithTx), tx, subjectPK, actionPK, groupPK)
}

// Get mocks base method.
func (m *MockSubjectActionGroupResourceService) Get(subjectPK, actionPK int64) (types.SubjectActionGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", subjectPK, actionPK)
	ret0, _ := ret[0].(types.SubjectActionGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubjectActionGroupResourceServiceMockRecorder) Get(subjectPK, actionPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubjectActionGroupResourceService)(nil).Get), subjectPK, actionPK)
}
