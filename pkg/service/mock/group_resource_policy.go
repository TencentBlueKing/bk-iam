// Code generated by MockGen. DO NOT EDIT.
// Source: group_resource_policy.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/service/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockGroupResourcePolicyService is a mock of GroupResourcePolicyService interface.
type MockGroupResourcePolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupResourcePolicyServiceMockRecorder
}

// MockGroupResourcePolicyServiceMockRecorder is the mock recorder for MockGroupResourcePolicyService.
type MockGroupResourcePolicyServiceMockRecorder struct {
	mock *MockGroupResourcePolicyService
}

// NewMockGroupResourcePolicyService creates a new mock instance.
func NewMockGroupResourcePolicyService(ctrl *gomock.Controller) *MockGroupResourcePolicyService {
	mock := &MockGroupResourcePolicyService{ctrl: ctrl}
	mock.recorder = &MockGroupResourcePolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupResourcePolicyService) EXPECT() *MockGroupResourcePolicyServiceMockRecorder {
	return m.recorder
}

// Alter mocks base method.
func (m *MockGroupResourcePolicyService) Alter(tx *sqlx.Tx, groupPK, templateID int64, systemID string, resourceChangedContents []types.ResourceChangedContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alter", tx, groupPK, templateID, systemID, resourceChangedContents)
	ret0, _ := ret[0].(error)
	return ret0
}

// Alter indicates an expected call of Alter.
func (mr *MockGroupResourcePolicyServiceMockRecorder) Alter(tx, groupPK, templateID, systemID, resourceChangedContents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alter", reflect.TypeOf((*MockGroupResourcePolicyService)(nil).Alter), tx, groupPK, templateID, systemID, resourceChangedContents)
}

// GetAuthorizedActionGroupMap mocks base method.
func (m *MockGroupResourcePolicyService) GetAuthorizedActionGroupMap(systemID string, actionResourceTypePK, resourceTypePK int64, resourceTypeID string) (map[int64][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizedActionGroupMap", systemID, actionResourceTypePK, resourceTypePK, resourceTypeID)
	ret0, _ := ret[0].(map[int64][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizedActionGroupMap indicates an expected call of GetAuthorizedActionGroupMap.
func (mr *MockGroupResourcePolicyServiceMockRecorder) GetAuthorizedActionGroupMap(systemID, actionResourceTypePK, resourceTypePK, resourceTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizedActionGroupMap", reflect.TypeOf((*MockGroupResourcePolicyService)(nil).GetAuthorizedActionGroupMap), systemID, actionResourceTypePK, resourceTypePK, resourceTypeID)
}
