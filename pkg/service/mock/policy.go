// Code generated by MockGen. DO NOT EDIT.
// Source: policy.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/service/types"
	reflect "reflect"

	set "github.com/TencentBlueKing/gopkg/collection/set"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockPolicyService is a mock of PolicyService interface.
type MockPolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyServiceMockRecorder
}

// MockPolicyServiceMockRecorder is the mock recorder for MockPolicyService.
type MockPolicyServiceMockRecorder struct {
	mock *MockPolicyService
}

// NewMockPolicyService creates a new mock instance.
func NewMockPolicyService(ctrl *gomock.Controller) *MockPolicyService {
	mock := &MockPolicyService{ctrl: ctrl}
	mock.recorder = &MockPolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyService) EXPECT() *MockPolicyServiceMockRecorder {
	return m.recorder
}

// AlterCustomPolicies mocks base method.
func (m *MockPolicyService) AlterCustomPolicies(subjectPK int64, createPolicies, updatePolicies []types.Policy, deletePolicyIDs []int64, actionPKWithResourceTypeSet *set.Int64Set) (map[int64][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterCustomPolicies", subjectPK, createPolicies, updatePolicies, deletePolicyIDs, actionPKWithResourceTypeSet)
	ret0, _ := ret[0].(map[int64][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlterCustomPolicies indicates an expected call of AlterCustomPolicies.
func (mr *MockPolicyServiceMockRecorder) AlterCustomPolicies(subjectPK, createPolicies, updatePolicies, deletePolicyIDs, actionPKWithResourceTypeSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterCustomPolicies", reflect.TypeOf((*MockPolicyService)(nil).AlterCustomPolicies), subjectPK, createPolicies, updatePolicies, deletePolicyIDs, actionPKWithResourceTypeSet)
}

// AlterCustomPoliciesWithTx mocks base method.
func (m *MockPolicyService) AlterCustomPoliciesWithTx(tx *sqlx.Tx, subjectPK int64, createPolicies, updatePolicies []types.Policy, deletePolicyIDs []int64, actionPKWithResourceTypeSet *set.Int64Set) (map[int64][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterCustomPoliciesWithTx", tx, subjectPK, createPolicies, updatePolicies, deletePolicyIDs, actionPKWithResourceTypeSet)
	ret0, _ := ret[0].(map[int64][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlterCustomPoliciesWithTx indicates an expected call of AlterCustomPoliciesWithTx.
func (mr *MockPolicyServiceMockRecorder) AlterCustomPoliciesWithTx(tx, subjectPK, createPolicies, updatePolicies, deletePolicyIDs, actionPKWithResourceTypeSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterCustomPoliciesWithTx", reflect.TypeOf((*MockPolicyService)(nil).AlterCustomPoliciesWithTx), tx, subjectPK, createPolicies, updatePolicies, deletePolicyIDs, actionPKWithResourceTypeSet)
}

// BulkDeleteBySubjectPKsWithTx mocks base method.
func (m *MockPolicyService) BulkDeleteBySubjectPKsWithTx(tx *sqlx.Tx, pks []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteBySubjectPKsWithTx", tx, pks)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteBySubjectPKsWithTx indicates an expected call of BulkDeleteBySubjectPKsWithTx.
func (mr *MockPolicyServiceMockRecorder) BulkDeleteBySubjectPKsWithTx(tx, pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteBySubjectPKsWithTx", reflect.TypeOf((*MockPolicyService)(nil).BulkDeleteBySubjectPKsWithTx), tx, pks)
}

// CreateAndDeleteTemplatePoliciesWithTx mocks base method.
func (m *MockPolicyService) CreateAndDeleteTemplatePoliciesWithTx(tx *sqlx.Tx, subjectPK, templateID int64, createPolicies []types.Policy, deletePolicyIDs []int64, actionPKWithResourceTypeSet *set.Int64Set) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndDeleteTemplatePoliciesWithTx", tx, subjectPK, templateID, createPolicies, deletePolicyIDs, actionPKWithResourceTypeSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAndDeleteTemplatePoliciesWithTx indicates an expected call of CreateAndDeleteTemplatePoliciesWithTx.
func (mr *MockPolicyServiceMockRecorder) CreateAndDeleteTemplatePoliciesWithTx(tx, subjectPK, templateID, createPolicies, deletePolicyIDs, actionPKWithResourceTypeSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndDeleteTemplatePoliciesWithTx", reflect.TypeOf((*MockPolicyService)(nil).CreateAndDeleteTemplatePoliciesWithTx), tx, subjectPK, templateID, createPolicies, deletePolicyIDs, actionPKWithResourceTypeSet)
}

// DeleteByActionPKWithTx mocks base method.
func (m *MockPolicyService) DeleteByActionPKWithTx(tx *sqlx.Tx, actionPK int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByActionPKWithTx", tx, actionPK)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByActionPKWithTx indicates an expected call of DeleteByActionPKWithTx.
func (mr *MockPolicyServiceMockRecorder) DeleteByActionPKWithTx(tx, actionPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByActionPKWithTx", reflect.TypeOf((*MockPolicyService)(nil).DeleteByActionPKWithTx), tx, actionPK)
}

// DeleteByPKs mocks base method.
func (m *MockPolicyService) DeleteByPKs(subjectPK int64, pks []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByPKs", subjectPK, pks)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByPKs indicates an expected call of DeleteByPKs.
func (mr *MockPolicyServiceMockRecorder) DeleteByPKs(subjectPK, pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPKs", reflect.TypeOf((*MockPolicyService)(nil).DeleteByPKs), subjectPK, pks)
}

// DeleteUnreferencedExpressions mocks base method.
func (m *MockPolicyService) DeleteUnreferencedExpressions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnreferencedExpressions")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnreferencedExpressions indicates an expected call of DeleteUnreferencedExpressions.
func (mr *MockPolicyServiceMockRecorder) DeleteUnreferencedExpressions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnreferencedExpressions", reflect.TypeOf((*MockPolicyService)(nil).DeleteUnreferencedExpressions))
}

// Get mocks base method.
func (m *MockPolicyService) Get(pk int64) (types.QueryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", pk)
	ret0, _ := ret[0].(types.QueryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicyServiceMockRecorder) Get(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicyService)(nil).Get), pk)
}

// GetByActionTemplate mocks base method.
func (m *MockPolicyService) GetByActionTemplate(subjectPK, actionPK, templateID int64) (types.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByActionTemplate", subjectPK, actionPK, templateID)
	ret0, _ := ret[0].(types.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByActionTemplate indicates an expected call of GetByActionTemplate.
func (mr *MockPolicyServiceMockRecorder) GetByActionTemplate(subjectPK, actionPK, templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByActionTemplate", reflect.TypeOf((*MockPolicyService)(nil).GetByActionTemplate), subjectPK, actionPK, templateID)
}

// GetCountByActionBeforeExpiredAt mocks base method.
func (m *MockPolicyService) GetCountByActionBeforeExpiredAt(actionPK, expiredAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByActionBeforeExpiredAt", actionPK, expiredAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByActionBeforeExpiredAt indicates an expected call of GetCountByActionBeforeExpiredAt.
func (mr *MockPolicyServiceMockRecorder) GetCountByActionBeforeExpiredAt(actionPK, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByActionBeforeExpiredAt", reflect.TypeOf((*MockPolicyService)(nil).GetCountByActionBeforeExpiredAt), actionPK, expiredAt)
}

// HasAnyByActionPK mocks base method.
func (m *MockPolicyService) HasAnyByActionPK(actionPK int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAnyByActionPK", actionPK)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAnyByActionPK indicates an expected call of HasAnyByActionPK.
func (mr *MockPolicyServiceMockRecorder) HasAnyByActionPK(actionPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAnyByActionPK", reflect.TypeOf((*MockPolicyService)(nil).HasAnyByActionPK), actionPK)
}

// ListAuthBySubjectAction mocks base method.
func (m *MockPolicyService) ListAuthBySubjectAction(subjectPKs []int64, actionPK int64) ([]types.AuthPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthBySubjectAction", subjectPKs, actionPK)
	ret0, _ := ret[0].([]types.AuthPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthBySubjectAction indicates an expected call of ListAuthBySubjectAction.
func (mr *MockPolicyServiceMockRecorder) ListAuthBySubjectAction(subjectPKs, actionPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthBySubjectAction", reflect.TypeOf((*MockPolicyService)(nil).ListAuthBySubjectAction), subjectPKs, actionPK)
}

// ListExpressionByPKs mocks base method.
func (m *MockPolicyService) ListExpressionByPKs(pks []int64) ([]types.AuthExpression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpressionByPKs", pks)
	ret0, _ := ret[0].([]types.AuthExpression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpressionByPKs indicates an expected call of ListExpressionByPKs.
func (mr *MockPolicyServiceMockRecorder) ListExpressionByPKs(pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpressionByPKs", reflect.TypeOf((*MockPolicyService)(nil).ListExpressionByPKs), pks)
}

// ListPagingQueryByActionBeforeExpiredAt mocks base method.
func (m *MockPolicyService) ListPagingQueryByActionBeforeExpiredAt(actionPK, expiredAt, offset, limit int64) ([]types.QueryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingQueryByActionBeforeExpiredAt", actionPK, expiredAt, offset, limit)
	ret0, _ := ret[0].([]types.QueryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingQueryByActionBeforeExpiredAt indicates an expected call of ListPagingQueryByActionBeforeExpiredAt.
func (mr *MockPolicyServiceMockRecorder) ListPagingQueryByActionBeforeExpiredAt(actionPK, expiredAt, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingQueryByActionBeforeExpiredAt", reflect.TypeOf((*MockPolicyService)(nil).ListPagingQueryByActionBeforeExpiredAt), actionPK, expiredAt, offset, limit)
}

// ListQueryByPKs mocks base method.
func (m *MockPolicyService) ListQueryByPKs(pks []int64) ([]types.QueryPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueryByPKs", pks)
	ret0, _ := ret[0].([]types.QueryPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueryByPKs indicates an expected call of ListQueryByPKs.
func (mr *MockPolicyServiceMockRecorder) ListQueryByPKs(pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueryByPKs", reflect.TypeOf((*MockPolicyService)(nil).ListQueryByPKs), pks)
}

// ListThinBySubjectActionTemplate mocks base method.
func (m *MockPolicyService) ListThinBySubjectActionTemplate(subjectPK int64, actionPKs []int64, templateID int64) ([]types.ThinPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThinBySubjectActionTemplate", subjectPK, actionPKs, templateID)
	ret0, _ := ret[0].([]types.ThinPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThinBySubjectActionTemplate indicates an expected call of ListThinBySubjectActionTemplate.
func (mr *MockPolicyServiceMockRecorder) ListThinBySubjectActionTemplate(subjectPK, actionPKs, templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThinBySubjectActionTemplate", reflect.TypeOf((*MockPolicyService)(nil).ListThinBySubjectActionTemplate), subjectPK, actionPKs, templateID)
}

// ListThinBySubjectTemplateBeforeExpiredAt mocks base method.
func (m *MockPolicyService) ListThinBySubjectTemplateBeforeExpiredAt(subjectPK, templateID, expiredAt int64) ([]types.ThinPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThinBySubjectTemplateBeforeExpiredAt", subjectPK, templateID, expiredAt)
	ret0, _ := ret[0].([]types.ThinPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThinBySubjectTemplateBeforeExpiredAt indicates an expected call of ListThinBySubjectTemplateBeforeExpiredAt.
func (mr *MockPolicyServiceMockRecorder) ListThinBySubjectTemplateBeforeExpiredAt(subjectPK, templateID, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThinBySubjectTemplateBeforeExpiredAt", reflect.TypeOf((*MockPolicyService)(nil).ListThinBySubjectTemplateBeforeExpiredAt), subjectPK, templateID, expiredAt)
}

// UpdateTemplatePoliciesWithTx mocks base method.
func (m *MockPolicyService) UpdateTemplatePoliciesWithTx(tx *sqlx.Tx, subjectPK int64, policies []types.Policy, actionPKWithResourceTypeSet *set.Int64Set) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplatePoliciesWithTx", tx, subjectPK, policies, actionPKWithResourceTypeSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTemplatePoliciesWithTx indicates an expected call of UpdateTemplatePoliciesWithTx.
func (mr *MockPolicyServiceMockRecorder) UpdateTemplatePoliciesWithTx(tx, subjectPK, policies, actionPKWithResourceTypeSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplatePoliciesWithTx", reflect.TypeOf((*MockPolicyService)(nil).UpdateTemplatePoliciesWithTx), tx, subjectPK, policies, actionPKWithResourceTypeSet)
}
