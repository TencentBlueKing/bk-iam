// Code generated by MockGen. DO NOT EDIT.
// Source: subject_action_expression.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/service/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSubjectActionExpressionService is a mock of SubjectActionExpressionService interface.
type MockSubjectActionExpressionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectActionExpressionServiceMockRecorder
}

// MockSubjectActionExpressionServiceMockRecorder is the mock recorder for MockSubjectActionExpressionService.
type MockSubjectActionExpressionServiceMockRecorder struct {
	mock *MockSubjectActionExpressionService
}

// NewMockSubjectActionExpressionService creates a new mock instance.
func NewMockSubjectActionExpressionService(ctrl *gomock.Controller) *MockSubjectActionExpressionService {
	mock := &MockSubjectActionExpressionService{ctrl: ctrl}
	mock.recorder = &MockSubjectActionExpressionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectActionExpressionService) EXPECT() *MockSubjectActionExpressionServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateWithTx mocks base method.
func (m *MockSubjectActionExpressionService) CreateOrUpdateWithTx(tx *sqlx.Tx, expression types.SubjectActionExpression) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateWithTx", tx, expression)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateWithTx indicates an expected call of CreateOrUpdateWithTx.
func (mr *MockSubjectActionExpressionServiceMockRecorder) CreateOrUpdateWithTx(tx, expression interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateWithTx", reflect.TypeOf((*MockSubjectActionExpressionService)(nil).CreateOrUpdateWithTx), tx, expression)
}
