// Code generated by MockGen. DO NOT EDIT.
// Source: open_abac_policy.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/service/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenAbacPolicyService is a mock of OpenAbacPolicyService interface.
type MockOpenAbacPolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAbacPolicyServiceMockRecorder
}

// MockOpenAbacPolicyServiceMockRecorder is the mock recorder for MockOpenAbacPolicyService.
type MockOpenAbacPolicyServiceMockRecorder struct {
	mock *MockOpenAbacPolicyService
}

// NewMockOpenAbacPolicyService creates a new mock instance.
func NewMockOpenAbacPolicyService(ctrl *gomock.Controller) *MockOpenAbacPolicyService {
	mock := &MockOpenAbacPolicyService{ctrl: ctrl}
	mock.recorder = &MockOpenAbacPolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAbacPolicyService) EXPECT() *MockOpenAbacPolicyServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOpenAbacPolicyService) Get(pk int64) (types.OpenAbacPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", pk)
	ret0, _ := ret[0].(types.OpenAbacPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOpenAbacPolicyServiceMockRecorder) Get(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOpenAbacPolicyService)(nil).Get), pk)
}

// GetCountByActionBeforeExpiredAt mocks base method.
func (m *MockOpenAbacPolicyService) GetCountByActionBeforeExpiredAt(actionPK, expiredAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByActionBeforeExpiredAt", actionPK, expiredAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByActionBeforeExpiredAt indicates an expected call of GetCountByActionBeforeExpiredAt.
func (mr *MockOpenAbacPolicyServiceMockRecorder) GetCountByActionBeforeExpiredAt(actionPK, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByActionBeforeExpiredAt", reflect.TypeOf((*MockOpenAbacPolicyService)(nil).GetCountByActionBeforeExpiredAt), actionPK, expiredAt)
}

// ListByPKs mocks base method.
func (m *MockOpenAbacPolicyService) ListByPKs(pks []int64) ([]types.OpenAbacPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPKs", pks)
	ret0, _ := ret[0].([]types.OpenAbacPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPKs indicates an expected call of ListByPKs.
func (mr *MockOpenAbacPolicyServiceMockRecorder) ListByPKs(pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPKs", reflect.TypeOf((*MockOpenAbacPolicyService)(nil).ListByPKs), pks)
}

// ListPagingByActionBeforeExpiredAt mocks base method.
func (m *MockOpenAbacPolicyService) ListPagingByActionBeforeExpiredAt(actionPK, expiredAt, offset, limit int64) ([]types.OpenAbacPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingByActionBeforeExpiredAt", actionPK, expiredAt, offset, limit)
	ret0, _ := ret[0].([]types.OpenAbacPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingByActionBeforeExpiredAt indicates an expected call of ListPagingByActionBeforeExpiredAt.
func (mr *MockOpenAbacPolicyServiceMockRecorder) ListPagingByActionBeforeExpiredAt(actionPK, expiredAt, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingByActionBeforeExpiredAt", reflect.TypeOf((*MockOpenAbacPolicyService)(nil).ListPagingByActionBeforeExpiredAt), actionPK, expiredAt, offset, limit)
}
