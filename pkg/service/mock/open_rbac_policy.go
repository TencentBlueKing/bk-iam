// Code generated by MockGen. DO NOT EDIT.
// Source: open_rbac_policy.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/service/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenRbacPolicyService is a mock of OpenRbacPolicyService interface.
type MockOpenRbacPolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockOpenRbacPolicyServiceMockRecorder
}

// MockOpenRbacPolicyServiceMockRecorder is the mock recorder for MockOpenRbacPolicyService.
type MockOpenRbacPolicyServiceMockRecorder struct {
	mock *MockOpenRbacPolicyService
}

// NewMockOpenRbacPolicyService creates a new mock instance.
func NewMockOpenRbacPolicyService(ctrl *gomock.Controller) *MockOpenRbacPolicyService {
	mock := &MockOpenRbacPolicyService{ctrl: ctrl}
	mock.recorder = &MockOpenRbacPolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenRbacPolicyService) EXPECT() *MockOpenRbacPolicyServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOpenRbacPolicyService) Get(pk int64) (types.OpenRbacPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", pk)
	ret0, _ := ret[0].(types.OpenRbacPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOpenRbacPolicyServiceMockRecorder) Get(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOpenRbacPolicyService)(nil).Get), pk)
}

// GetCountByActionBeforeExpiredAt mocks base method.
func (m *MockOpenRbacPolicyService) GetCountByActionBeforeExpiredAt(actionPK, expiredAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByActionBeforeExpiredAt", actionPK, expiredAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByActionBeforeExpiredAt indicates an expected call of GetCountByActionBeforeExpiredAt.
func (mr *MockOpenRbacPolicyServiceMockRecorder) GetCountByActionBeforeExpiredAt(actionPK, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByActionBeforeExpiredAt", reflect.TypeOf((*MockOpenRbacPolicyService)(nil).GetCountByActionBeforeExpiredAt), actionPK, expiredAt)
}

// ListByPKs mocks base method.
func (m *MockOpenRbacPolicyService) ListByPKs(pks []int64) ([]types.OpenRbacPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPKs", pks)
	ret0, _ := ret[0].([]types.OpenRbacPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPKs indicates an expected call of ListByPKs.
func (mr *MockOpenRbacPolicyServiceMockRecorder) ListByPKs(pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPKs", reflect.TypeOf((*MockOpenRbacPolicyService)(nil).ListByPKs), pks)
}

// ListPagingByActionBeforeExpiredAt mocks base method.
func (m *MockOpenRbacPolicyService) ListPagingByActionBeforeExpiredAt(actionPK, expiredAt, offset, limit int64) ([]types.OpenRbacPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingByActionBeforeExpiredAt", actionPK, expiredAt, offset, limit)
	ret0, _ := ret[0].([]types.OpenRbacPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingByActionBeforeExpiredAt indicates an expected call of ListPagingByActionBeforeExpiredAt.
func (mr *MockOpenRbacPolicyServiceMockRecorder) ListPagingByActionBeforeExpiredAt(actionPK, expiredAt, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingByActionBeforeExpiredAt", reflect.TypeOf((*MockOpenRbacPolicyService)(nil).ListPagingByActionBeforeExpiredAt), actionPK, expiredAt, offset, limit)
}
