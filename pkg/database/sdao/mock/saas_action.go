// Code generated by MockGen. DO NOT EDIT.
// Source: saas_action.go

// Package mock is a generated GoMock package.
package mock

import (
	sdao "iam/pkg/database/sdao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSaaSActionManager is a mock of SaaSActionManager interface.
type MockSaaSActionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSaaSActionManagerMockRecorder
}

// MockSaaSActionManagerMockRecorder is the mock recorder for MockSaaSActionManager.
type MockSaaSActionManagerMockRecorder struct {
	mock *MockSaaSActionManager
}

// NewMockSaaSActionManager creates a new mock instance.
func NewMockSaaSActionManager(ctrl *gomock.Controller) *MockSaaSActionManager {
	mock := &MockSaaSActionManager{ctrl: ctrl}
	mock.recorder = &MockSaaSActionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaaSActionManager) EXPECT() *MockSaaSActionManagerMockRecorder {
	return m.recorder
}

// BulkCreateWithTx mocks base method.
func (m *MockSaaSActionManager) BulkCreateWithTx(tx *sqlx.Tx, saasActions []sdao.SaaSAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateWithTx", tx, saasActions)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreateWithTx indicates an expected call of BulkCreateWithTx.
func (mr *MockSaaSActionManagerMockRecorder) BulkCreateWithTx(tx, saasActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateWithTx", reflect.TypeOf((*MockSaaSActionManager)(nil).BulkCreateWithTx), tx, saasActions)
}

// BulkDeleteWithTx mocks base method.
func (m *MockSaaSActionManager) BulkDeleteWithTx(tx *sqlx.Tx, system string, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteWithTx", tx, system, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteWithTx indicates an expected call of BulkDeleteWithTx.
func (mr *MockSaaSActionManagerMockRecorder) BulkDeleteWithTx(tx, system, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteWithTx", reflect.TypeOf((*MockSaaSActionManager)(nil).BulkDeleteWithTx), tx, system, ids)
}

// Get mocks base method.
func (m *MockSaaSActionManager) Get(system, actionID string) (sdao.SaaSAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", system, actionID)
	ret0, _ := ret[0].(sdao.SaaSAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSaaSActionManagerMockRecorder) Get(system, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSaaSActionManager)(nil).Get), system, actionID)
}

// GetAuthType mocks base method.
func (m *MockSaaSActionManager) GetAuthType(system, actionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthType", system, actionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthType indicates an expected call of GetAuthType.
func (mr *MockSaaSActionManagerMockRecorder) GetAuthType(system, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthType", reflect.TypeOf((*MockSaaSActionManager)(nil).GetAuthType), system, actionID)
}

// ListBySystem mocks base method.
func (m *MockSaaSActionManager) ListBySystem(system string) ([]sdao.SaaSAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySystem", system)
	ret0, _ := ret[0].([]sdao.SaaSAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySystem indicates an expected call of ListBySystem.
func (mr *MockSaaSActionManagerMockRecorder) ListBySystem(system interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySystem", reflect.TypeOf((*MockSaaSActionManager)(nil).ListBySystem), system)
}

// Update mocks base method.
func (m *MockSaaSActionManager) Update(tx *sqlx.Tx, system, actionID string, saasAction sdao.SaaSAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tx, system, actionID, saasAction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSaaSActionManagerMockRecorder) Update(tx, system, actionID, saasAction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSaaSActionManager)(nil).Update), tx, system, actionID, saasAction)
}
