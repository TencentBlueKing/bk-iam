// Code generated by MockGen. DO NOT EDIT.
// Source: app_secret.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAppSecretManager is a mock of AppSecretManager interface.
type MockAppSecretManager struct {
	ctrl     *gomock.Controller
	recorder *MockAppSecretManagerMockRecorder
}

// MockAppSecretManagerMockRecorder is the mock recorder for MockAppSecretManager.
type MockAppSecretManagerMockRecorder struct {
	mock *MockAppSecretManager
}

// NewMockAppSecretManager creates a new mock instance.
func NewMockAppSecretManager(ctrl *gomock.Controller) *MockAppSecretManager {
	mock := &MockAppSecretManager{ctrl: ctrl}
	mock.recorder = &MockAppSecretManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppSecretManager) EXPECT() *MockAppSecretManagerMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockAppSecretManager) Exists(appCode, appSecret string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", appCode, appSecret)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAppSecretManagerMockRecorder) Exists(appCode, appSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAppSecretManager)(nil).Exists), appCode, appSecret)
}
