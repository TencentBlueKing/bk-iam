// Code generated by MockGen. DO NOT EDIT.
// Source: engine_policy.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "iam/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnginePolicyManager is a mock of EnginePolicyManager interface.
type MockEnginePolicyManager struct {
	ctrl     *gomock.Controller
	recorder *MockEnginePolicyManagerMockRecorder
}

// MockEnginePolicyManagerMockRecorder is the mock recorder for MockEnginePolicyManager.
type MockEnginePolicyManagerMockRecorder struct {
	mock *MockEnginePolicyManager
}

// NewMockEnginePolicyManager creates a new mock instance.
func NewMockEnginePolicyManager(ctrl *gomock.Controller) *MockEnginePolicyManager {
	mock := &MockEnginePolicyManager{ctrl: ctrl}
	mock.recorder = &MockEnginePolicyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnginePolicyManager) EXPECT() *MockEnginePolicyManagerMockRecorder {
	return m.recorder
}

// GetMaxPKBeforeUpdatedAt mocks base method.
func (m *MockEnginePolicyManager) GetMaxPKBeforeUpdatedAt(updatedAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxPKBeforeUpdatedAt", updatedAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxPKBeforeUpdatedAt indicates an expected call of GetMaxPKBeforeUpdatedAt.
func (mr *MockEnginePolicyManagerMockRecorder) GetMaxPKBeforeUpdatedAt(updatedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxPKBeforeUpdatedAt", reflect.TypeOf((*MockEnginePolicyManager)(nil).GetMaxPKBeforeUpdatedAt), updatedAt)
}

// ListBetweenPK mocks base method.
func (m *MockEnginePolicyManager) ListBetweenPK(expiredAt, minPK, maxPK int64) ([]dao.EnginePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBetweenPK", expiredAt, minPK, maxPK)
	ret0, _ := ret[0].([]dao.EnginePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBetweenPK indicates an expected call of ListBetweenPK.
func (mr *MockEnginePolicyManagerMockRecorder) ListBetweenPK(expiredAt, minPK, maxPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBetweenPK", reflect.TypeOf((*MockEnginePolicyManager)(nil).ListBetweenPK), expiredAt, minPK, maxPK)
}

// ListByPKs mocks base method.
func (m *MockEnginePolicyManager) ListByPKs(pks []int64) ([]dao.EnginePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPKs", pks)
	ret0, _ := ret[0].([]dao.EnginePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPKs indicates an expected call of ListByPKs.
func (mr *MockEnginePolicyManagerMockRecorder) ListByPKs(pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPKs", reflect.TypeOf((*MockEnginePolicyManager)(nil).ListByPKs), pks)
}

// ListPKBetweenUpdatedAt mocks base method.
func (m *MockEnginePolicyManager) ListPKBetweenUpdatedAt(beginUpdatedAt, endUpdatedAt int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPKBetweenUpdatedAt", beginUpdatedAt, endUpdatedAt)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPKBetweenUpdatedAt indicates an expected call of ListPKBetweenUpdatedAt.
func (mr *MockEnginePolicyManagerMockRecorder) ListPKBetweenUpdatedAt(beginUpdatedAt, endUpdatedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPKBetweenUpdatedAt", reflect.TypeOf((*MockEnginePolicyManager)(nil).ListPKBetweenUpdatedAt), beginUpdatedAt, endUpdatedAt)
}
