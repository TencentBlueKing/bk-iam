// Code generated by MockGen. DO NOT EDIT.
// Source: subject_action_alter_event.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "iam/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSubjectActionAlterEventManager is a mock of SubjectActionAlterEventManager interface.
type MockSubjectActionAlterEventManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectActionAlterEventManagerMockRecorder
}

// MockSubjectActionAlterEventManagerMockRecorder is the mock recorder for MockSubjectActionAlterEventManager.
type MockSubjectActionAlterEventManagerMockRecorder struct {
	mock *MockSubjectActionAlterEventManager
}

// NewMockSubjectActionAlterEventManager creates a new mock instance.
func NewMockSubjectActionAlterEventManager(ctrl *gomock.Controller) *MockSubjectActionAlterEventManager {
	mock := &MockSubjectActionAlterEventManager{ctrl: ctrl}
	mock.recorder = &MockSubjectActionAlterEventManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectActionAlterEventManager) EXPECT() *MockSubjectActionAlterEventManagerMockRecorder {
	return m.recorder
}

// BulkCreateWithTx mocks base method.
func (m *MockSubjectActionAlterEventManager) BulkCreateWithTx(tx *sqlx.Tx, messages []dao.SubjectActionAlterEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateWithTx", tx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreateWithTx indicates an expected call of BulkCreateWithTx.
func (mr *MockSubjectActionAlterEventManagerMockRecorder) BulkCreateWithTx(tx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateWithTx", reflect.TypeOf((*MockSubjectActionAlterEventManager)(nil).BulkCreateWithTx), tx, messages)
}

// BulkUpdateStatus mocks base method.
func (m *MockSubjectActionAlterEventManager) BulkUpdateStatus(uuids []string, status int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateStatus", uuids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateStatus indicates an expected call of BulkUpdateStatus.
func (mr *MockSubjectActionAlterEventManagerMockRecorder) BulkUpdateStatus(uuids, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateStatus", reflect.TypeOf((*MockSubjectActionAlterEventManager)(nil).BulkUpdateStatus), uuids, status)
}

// Delete mocks base method.
func (m *MockSubjectActionAlterEventManager) Delete(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubjectActionAlterEventManagerMockRecorder) Delete(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubjectActionAlterEventManager)(nil).Delete), uuid)
}

// Get mocks base method.
func (m *MockSubjectActionAlterEventManager) Get(uuid string) (dao.SubjectActionAlterEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(dao.SubjectActionAlterEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubjectActionAlterEventManagerMockRecorder) Get(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubjectActionAlterEventManager)(nil).Get), uuid)
}

// IncrCheckCount mocks base method.
func (m *MockSubjectActionAlterEventManager) IncrCheckCount(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrCheckCount", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrCheckCount indicates an expected call of IncrCheckCount.
func (mr *MockSubjectActionAlterEventManagerMockRecorder) IncrCheckCount(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrCheckCount", reflect.TypeOf((*MockSubjectActionAlterEventManager)(nil).IncrCheckCount), uuid)
}

// ListUUIDByStatusBeforeUpdatedAt mocks base method.
func (m *MockSubjectActionAlterEventManager) ListUUIDByStatusBeforeUpdatedAt(status, updateAt int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUUIDByStatusBeforeUpdatedAt", status, updateAt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUUIDByStatusBeforeUpdatedAt indicates an expected call of ListUUIDByStatusBeforeUpdatedAt.
func (mr *MockSubjectActionAlterEventManagerMockRecorder) ListUUIDByStatusBeforeUpdatedAt(status, updateAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUUIDByStatusBeforeUpdatedAt", reflect.TypeOf((*MockSubjectActionAlterEventManager)(nil).ListUUIDByStatusBeforeUpdatedAt), status, updateAt)
}

// ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt mocks base method.
func (m *MockSubjectActionAlterEventManager) ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt(status, checkCount, updateAt int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt", status, checkCount, updateAt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt indicates an expected call of ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt.
func (mr *MockSubjectActionAlterEventManagerMockRecorder) ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt(status, checkCount, updateAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt", reflect.TypeOf((*MockSubjectActionAlterEventManager)(nil).ListUUIDGreaterThanStatusLessThanCheckCountBeforeUpdatedAt), status, checkCount, updateAt)
}
