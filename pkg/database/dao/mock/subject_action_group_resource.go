// Code generated by MockGen. DO NOT EDIT.
// Source: subject_action_group_resource.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "iam/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSubjectActionGroupResourceManager is a mock of SubjectActionGroupResourceManager interface.
type MockSubjectActionGroupResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectActionGroupResourceManagerMockRecorder
}

// MockSubjectActionGroupResourceManagerMockRecorder is the mock recorder for MockSubjectActionGroupResourceManager.
type MockSubjectActionGroupResourceManagerMockRecorder struct {
	mock *MockSubjectActionGroupResourceManager
}

// NewMockSubjectActionGroupResourceManager creates a new mock instance.
func NewMockSubjectActionGroupResourceManager(ctrl *gomock.Controller) *MockSubjectActionGroupResourceManager {
	mock := &MockSubjectActionGroupResourceManager{ctrl: ctrl}
	mock.recorder = &MockSubjectActionGroupResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectActionGroupResourceManager) EXPECT() *MockSubjectActionGroupResourceManagerMockRecorder {
	return m.recorder
}

// CreateWithTx mocks base method.
func (m *MockSubjectActionGroupResourceManager) CreateWithTx(tx *sqlx.Tx, subjectActionResourceGroup dao.SubjectActionGroupResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", tx, subjectActionResourceGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockSubjectActionGroupResourceManagerMockRecorder) CreateWithTx(tx, subjectActionResourceGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockSubjectActionGroupResourceManager)(nil).CreateWithTx), tx, subjectActionResourceGroup)
}

// GetBySubjectAction mocks base method.
func (m *MockSubjectActionGroupResourceManager) GetBySubjectAction(subjectPK, actionPK int64) (dao.SubjectActionGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubjectAction", subjectPK, actionPK)
	ret0, _ := ret[0].(dao.SubjectActionGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubjectAction indicates an expected call of GetBySubjectAction.
func (mr *MockSubjectActionGroupResourceManagerMockRecorder) GetBySubjectAction(subjectPK, actionPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubjectAction", reflect.TypeOf((*MockSubjectActionGroupResourceManager)(nil).GetBySubjectAction), subjectPK, actionPK)
}

// UpdateGroupResourceWithTx mocks base method.
func (m *MockSubjectActionGroupResourceManager) UpdateGroupResourceWithTx(tx *sqlx.Tx, pk int64, groupResource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupResourceWithTx", tx, pk, groupResource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupResourceWithTx indicates an expected call of UpdateGroupResourceWithTx.
func (mr *MockSubjectActionGroupResourceManagerMockRecorder) UpdateGroupResourceWithTx(tx, pk, groupResource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupResourceWithTx", reflect.TypeOf((*MockSubjectActionGroupResourceManager)(nil).UpdateGroupResourceWithTx), tx, pk, groupResource)
}
