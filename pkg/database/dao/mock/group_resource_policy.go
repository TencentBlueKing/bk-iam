// Code generated by MockGen. DO NOT EDIT.
// Source: group_resource_policy.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "iam/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockGroupResourcePolicyManager is a mock of GroupResourcePolicyManager interface.
type MockGroupResourcePolicyManager struct {
	ctrl     *gomock.Controller
	recorder *MockGroupResourcePolicyManagerMockRecorder
}

// MockGroupResourcePolicyManagerMockRecorder is the mock recorder for MockGroupResourcePolicyManager.
type MockGroupResourcePolicyManagerMockRecorder struct {
	mock *MockGroupResourcePolicyManager
}

// NewMockGroupResourcePolicyManager creates a new mock instance.
func NewMockGroupResourcePolicyManager(ctrl *gomock.Controller) *MockGroupResourcePolicyManager {
	mock := &MockGroupResourcePolicyManager{ctrl: ctrl}
	mock.recorder = &MockGroupResourcePolicyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupResourcePolicyManager) EXPECT() *MockGroupResourcePolicyManagerMockRecorder {
	return m.recorder
}

// BulkCreateWithTx mocks base method.
func (m *MockGroupResourcePolicyManager) BulkCreateWithTx(tx *sqlx.Tx, policies []dao.GroupResourcePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateWithTx", tx, policies)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreateWithTx indicates an expected call of BulkCreateWithTx.
func (mr *MockGroupResourcePolicyManagerMockRecorder) BulkCreateWithTx(tx, policies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateWithTx", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).BulkCreateWithTx), tx, policies)
}

// BulkDeleteByGroupPKsWithTx mocks base method.
func (m *MockGroupResourcePolicyManager) BulkDeleteByGroupPKsWithTx(tx *sqlx.Tx, groupPKs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByGroupPKsWithTx", tx, groupPKs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteByGroupPKsWithTx indicates an expected call of BulkDeleteByGroupPKsWithTx.
func (mr *MockGroupResourcePolicyManagerMockRecorder) BulkDeleteByGroupPKsWithTx(tx, groupPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByGroupPKsWithTx", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).BulkDeleteByGroupPKsWithTx), tx, groupPKs)
}

// BulkDeleteByPKsWithTx mocks base method.
func (m *MockGroupResourcePolicyManager) BulkDeleteByPKsWithTx(tx *sqlx.Tx, pks []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByPKsWithTx", tx, pks)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteByPKsWithTx indicates an expected call of BulkDeleteByPKsWithTx.
func (mr *MockGroupResourcePolicyManagerMockRecorder) BulkDeleteByPKsWithTx(tx, pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByPKsWithTx", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).BulkDeleteByPKsWithTx), tx, pks)
}

// BulkUpdateActionPKsWithTx mocks base method.
func (m *MockGroupResourcePolicyManager) BulkUpdateActionPKsWithTx(tx *sqlx.Tx, policies []dao.GroupResourcePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateActionPKsWithTx", tx, policies)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateActionPKsWithTx indicates an expected call of BulkUpdateActionPKsWithTx.
func (mr *MockGroupResourcePolicyManagerMockRecorder) BulkUpdateActionPKsWithTx(tx, policies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateActionPKsWithTx", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).BulkUpdateActionPKsWithTx), tx, policies)
}

// ListActionPKsByGroup mocks base method.
func (m *MockGroupResourcePolicyManager) ListActionPKsByGroup(groupPK int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActionPKsByGroup", groupPK)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActionPKsByGroup indicates an expected call of ListActionPKsByGroup.
func (mr *MockGroupResourcePolicyManagerMockRecorder) ListActionPKsByGroup(groupPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionPKsByGroup", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).ListActionPKsByGroup), groupPK)
}

// ListByGroupSystemActionRelatedResourceType mocks base method.
func (m *MockGroupResourcePolicyManager) ListByGroupSystemActionRelatedResourceType(groupPK int64, systemID string, actionRelatedResourceTypePK int64) ([]dao.GroupResourcePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGroupSystemActionRelatedResourceType", groupPK, systemID, actionRelatedResourceTypePK)
	ret0, _ := ret[0].([]dao.GroupResourcePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGroupSystemActionRelatedResourceType indicates an expected call of ListByGroupSystemActionRelatedResourceType.
func (mr *MockGroupResourcePolicyManagerMockRecorder) ListByGroupSystemActionRelatedResourceType(groupPK, systemID, actionRelatedResourceTypePK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGroupSystemActionRelatedResourceType", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).ListByGroupSystemActionRelatedResourceType), groupPK, systemID, actionRelatedResourceTypePK)
}

// ListBySignatures mocks base method.
func (m *MockGroupResourcePolicyManager) ListBySignatures(signatures []string) ([]dao.GroupResourcePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySignatures", signatures)
	ret0, _ := ret[0].([]dao.GroupResourcePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySignatures indicates an expected call of ListBySignatures.
func (mr *MockGroupResourcePolicyManagerMockRecorder) ListBySignatures(signatures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySignatures", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).ListBySignatures), signatures)
}

// ListThinByResource mocks base method.
func (m *MockGroupResourcePolicyManager) ListThinByResource(systemID string, actionResourceTypePK, resourceTypePK int64, resourceID string) ([]dao.ThinGroupResourcePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThinByResource", systemID, actionResourceTypePK, resourceTypePK, resourceID)
	ret0, _ := ret[0].([]dao.ThinGroupResourcePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThinByResource indicates an expected call of ListThinByResource.
func (mr *MockGroupResourcePolicyManagerMockRecorder) ListThinByResource(systemID, actionResourceTypePK, resourceTypePK, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThinByResource", reflect.TypeOf((*MockGroupResourcePolicyManager)(nil).ListThinByResource), systemID, actionResourceTypePK, resourceTypePK, resourceID)
}
