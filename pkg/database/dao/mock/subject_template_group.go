// Code generated by MockGen. DO NOT EDIT.
// Source: subject_template_group.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "iam/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSubjectTemplateGroupManager is a mock of SubjectTemplateGroupManager interface.
type MockSubjectTemplateGroupManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectTemplateGroupManagerMockRecorder
}

// MockSubjectTemplateGroupManagerMockRecorder is the mock recorder for MockSubjectTemplateGroupManager.
type MockSubjectTemplateGroupManagerMockRecorder struct {
	mock *MockSubjectTemplateGroupManager
}

// NewMockSubjectTemplateGroupManager creates a new mock instance.
func NewMockSubjectTemplateGroupManager(ctrl *gomock.Controller) *MockSubjectTemplateGroupManager {
	mock := &MockSubjectTemplateGroupManager{ctrl: ctrl}
	mock.recorder = &MockSubjectTemplateGroupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectTemplateGroupManager) EXPECT() *MockSubjectTemplateGroupManagerMockRecorder {
	return m.recorder
}

// BulkCreateWithTx mocks base method.
func (m *MockSubjectTemplateGroupManager) BulkCreateWithTx(tx *sqlx.Tx, relations []dao.SubjectTemplateGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateWithTx", tx, relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreateWithTx indicates an expected call of BulkCreateWithTx.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) BulkCreateWithTx(tx, relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateWithTx", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).BulkCreateWithTx), tx, relations)
}

// BulkDeleteWithTx mocks base method.
func (m *MockSubjectTemplateGroupManager) BulkDeleteWithTx(tx *sqlx.Tx, relations []dao.SubjectTemplateGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteWithTx", tx, relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteWithTx indicates an expected call of BulkDeleteWithTx.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) BulkDeleteWithTx(tx, relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteWithTx", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).BulkDeleteWithTx), tx, relations)
}

// BulkUpdateExpiredAtByRelationWithTx mocks base method.
func (m *MockSubjectTemplateGroupManager) BulkUpdateExpiredAtByRelationWithTx(tx *sqlx.Tx, relations []dao.SubjectRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateExpiredAtByRelationWithTx", tx, relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateExpiredAtByRelationWithTx indicates an expected call of BulkUpdateExpiredAtByRelationWithTx.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) BulkUpdateExpiredAtByRelationWithTx(tx, relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateExpiredAtByRelationWithTx", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).BulkUpdateExpiredAtByRelationWithTx), tx, relations)
}

// BulkUpdateExpiredAtWithTx mocks base method.
func (m *MockSubjectTemplateGroupManager) BulkUpdateExpiredAtWithTx(tx *sqlx.Tx, relations []dao.SubjectTemplateGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateExpiredAtWithTx", tx, relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateExpiredAtWithTx indicates an expected call of BulkUpdateExpiredAtWithTx.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) BulkUpdateExpiredAtWithTx(tx, relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateExpiredAtWithTx", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).BulkUpdateExpiredAtWithTx), tx, relations)
}

// GetMaxExpiredAtBySubjectGroup mocks base method.
func (m *MockSubjectTemplateGroupManager) GetMaxExpiredAtBySubjectGroup(subjectPK, groupPK, excludeTemplateID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxExpiredAtBySubjectGroup", subjectPK, groupPK, excludeTemplateID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxExpiredAtBySubjectGroup indicates an expected call of GetMaxExpiredAtBySubjectGroup.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) GetMaxExpiredAtBySubjectGroup(subjectPK, groupPK, excludeTemplateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxExpiredAtBySubjectGroup", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).GetMaxExpiredAtBySubjectGroup), subjectPK, groupPK, excludeTemplateID)
}

// GetTemplateGroupMemberCount mocks base method.
func (m *MockSubjectTemplateGroupManager) GetTemplateGroupMemberCount(groupPK, templateID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateGroupMemberCount", groupPK, templateID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateGroupMemberCount indicates an expected call of GetTemplateGroupMemberCount.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) GetTemplateGroupMemberCount(groupPK, templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateGroupMemberCount", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).GetTemplateGroupMemberCount), groupPK, templateID)
}

// ListGroupDistinctSubjectPK mocks base method.
func (m *MockSubjectTemplateGroupManager) ListGroupDistinctSubjectPK(groupPK int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupDistinctSubjectPK", groupPK)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupDistinctSubjectPK indicates an expected call of ListGroupDistinctSubjectPK.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) ListGroupDistinctSubjectPK(groupPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupDistinctSubjectPK", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).ListGroupDistinctSubjectPK), groupPK)
}

// ListMaxExpiredAtRelation mocks base method.
func (m *MockSubjectTemplateGroupManager) ListMaxExpiredAtRelation(groupPK int64) ([]dao.ThinSubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMaxExpiredAtRelation", groupPK)
	ret0, _ := ret[0].([]dao.ThinSubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMaxExpiredAtRelation indicates an expected call of ListMaxExpiredAtRelation.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) ListMaxExpiredAtRelation(groupPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMaxExpiredAtRelation", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).ListMaxExpiredAtRelation), groupPK)
}

// ListPagingTemplateGroupMember mocks base method.
func (m *MockSubjectTemplateGroupManager) ListPagingTemplateGroupMember(groupPK, templateID, limit, offset int64) ([]dao.SubjectTemplateGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingTemplateGroupMember", groupPK, templateID, limit, offset)
	ret0, _ := ret[0].([]dao.SubjectTemplateGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingTemplateGroupMember indicates an expected call of ListPagingTemplateGroupMember.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) ListPagingTemplateGroupMember(groupPK, templateID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingTemplateGroupMember", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).ListPagingTemplateGroupMember), groupPK, templateID, limit, offset)
}

// ListRelationBySubjectPKGroupPKs mocks base method.
func (m *MockSubjectTemplateGroupManager) ListRelationBySubjectPKGroupPKs(subjectPK int64, groupPKs []int64) ([]dao.SubjectTemplateGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelationBySubjectPKGroupPKs", subjectPK, groupPKs)
	ret0, _ := ret[0].([]dao.SubjectTemplateGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelationBySubjectPKGroupPKs indicates an expected call of ListRelationBySubjectPKGroupPKs.
func (mr *MockSubjectTemplateGroupManagerMockRecorder) ListRelationBySubjectPKGroupPKs(subjectPK, groupPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationBySubjectPKGroupPKs", reflect.TypeOf((*MockSubjectTemplateGroupManager)(nil).ListRelationBySubjectPKGroupPKs), subjectPK, groupPKs)
}
