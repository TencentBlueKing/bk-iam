// Code generated by MockGen. DO NOT EDIT.
// Source: subject_relation.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "iam/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockSubjectRelationManager is a mock of SubjectRelationManager interface.
type MockSubjectRelationManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectRelationManagerMockRecorder
}

// MockSubjectRelationManagerMockRecorder is the mock recorder for MockSubjectRelationManager.
type MockSubjectRelationManagerMockRecorder struct {
	mock *MockSubjectRelationManager
}

// NewMockSubjectRelationManager creates a new mock instance.
func NewMockSubjectRelationManager(ctrl *gomock.Controller) *MockSubjectRelationManager {
	mock := &MockSubjectRelationManager{ctrl: ctrl}
	mock.recorder = &MockSubjectRelationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectRelationManager) EXPECT() *MockSubjectRelationManagerMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockSubjectRelationManager) BulkCreate(relations []dao.SubjectRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockSubjectRelationManagerMockRecorder) BulkCreate(relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockSubjectRelationManager)(nil).BulkCreate), relations)
}

// BulkDeleteByMembersWithTx mocks base method.
func (m *MockSubjectRelationManager) BulkDeleteByMembersWithTx(tx *sqlx.Tx, _type, id, subjectType string, subjectIDs []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByMembersWithTx", tx, _type, id, subjectType, subjectIDs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDeleteByMembersWithTx indicates an expected call of BulkDeleteByMembersWithTx.
func (mr *MockSubjectRelationManagerMockRecorder) BulkDeleteByMembersWithTx(tx, _type, id, subjectType, subjectIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByMembersWithTx", reflect.TypeOf((*MockSubjectRelationManager)(nil).BulkDeleteByMembersWithTx), tx, _type, id, subjectType, subjectIDs)
}

// BulkDeleteByParentPKs mocks base method.
func (m *MockSubjectRelationManager) BulkDeleteByParentPKs(tx *sqlx.Tx, parentPKs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteByParentPKs", tx, parentPKs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteByParentPKs indicates an expected call of BulkDeleteByParentPKs.
func (mr *MockSubjectRelationManagerMockRecorder) BulkDeleteByParentPKs(tx, parentPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteByParentPKs", reflect.TypeOf((*MockSubjectRelationManager)(nil).BulkDeleteByParentPKs), tx, parentPKs)
}

// BulkDeleteBySubjectPKs mocks base method.
func (m *MockSubjectRelationManager) BulkDeleteBySubjectPKs(tx *sqlx.Tx, subjectPKs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDeleteBySubjectPKs", tx, subjectPKs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDeleteBySubjectPKs indicates an expected call of BulkDeleteBySubjectPKs.
func (mr *MockSubjectRelationManagerMockRecorder) BulkDeleteBySubjectPKs(tx, subjectPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDeleteBySubjectPKs", reflect.TypeOf((*MockSubjectRelationManager)(nil).BulkDeleteBySubjectPKs), tx, subjectPKs)
}

// GetMemberCount mocks base method.
func (m *MockSubjectRelationManager) GetMemberCount(_type, id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberCount", _type, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberCount indicates an expected call of GetMemberCount.
func (mr *MockSubjectRelationManagerMockRecorder) GetMemberCount(_type, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberCount", reflect.TypeOf((*MockSubjectRelationManager)(nil).GetMemberCount), _type, id)
}

// GetMemberCountBeforeExpiredAt mocks base method.
func (m *MockSubjectRelationManager) GetMemberCountBeforeExpiredAt(_type, id string, expiredAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberCountBeforeExpiredAt", _type, id, expiredAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberCountBeforeExpiredAt indicates an expected call of GetMemberCountBeforeExpiredAt.
func (mr *MockSubjectRelationManagerMockRecorder) GetMemberCountBeforeExpiredAt(_type, id, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberCountBeforeExpiredAt", reflect.TypeOf((*MockSubjectRelationManager)(nil).GetMemberCountBeforeExpiredAt), _type, id, expiredAt)
}

// ListEffectRelationBySubjectPKs mocks base method.
func (m *MockSubjectRelationManager) ListEffectRelationBySubjectPKs(subjectPKs []int64) ([]dao.EffectSubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEffectRelationBySubjectPKs", subjectPKs)
	ret0, _ := ret[0].([]dao.EffectSubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEffectRelationBySubjectPKs indicates an expected call of ListEffectRelationBySubjectPKs.
func (mr *MockSubjectRelationManagerMockRecorder) ListEffectRelationBySubjectPKs(subjectPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEffectRelationBySubjectPKs", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListEffectRelationBySubjectPKs), subjectPKs)
}

// ListEffectThinRelationBySubjectPK mocks base method.
func (m *MockSubjectRelationManager) ListEffectThinRelationBySubjectPK(subjectPK int64) ([]dao.ThinSubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEffectThinRelationBySubjectPK", subjectPK)
	ret0, _ := ret[0].([]dao.ThinSubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEffectThinRelationBySubjectPK indicates an expected call of ListEffectThinRelationBySubjectPK.
func (mr *MockSubjectRelationManagerMockRecorder) ListEffectThinRelationBySubjectPK(subjectPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEffectThinRelationBySubjectPK", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListEffectThinRelationBySubjectPK), subjectPK)
}

// ListMember mocks base method.
func (m *MockSubjectRelationManager) ListMember(_type, id string) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMember", _type, id)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMember indicates an expected call of ListMember.
func (mr *MockSubjectRelationManagerMockRecorder) ListMember(_type, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMember", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListMember), _type, id)
}

// ListPagingMember mocks base method.
func (m *MockSubjectRelationManager) ListPagingMember(_type, id string, limit, offset int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingMember", _type, id, limit, offset)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingMember indicates an expected call of ListPagingMember.
func (mr *MockSubjectRelationManagerMockRecorder) ListPagingMember(_type, id, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingMember", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListPagingMember), _type, id, limit, offset)
}

// ListPagingMemberBeforeExpiredAt mocks base method.
func (m *MockSubjectRelationManager) ListPagingMemberBeforeExpiredAt(_type, id string, expiredAt, limit, offset int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingMemberBeforeExpiredAt", _type, id, expiredAt, limit, offset)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingMemberBeforeExpiredAt indicates an expected call of ListPagingMemberBeforeExpiredAt.
func (mr *MockSubjectRelationManagerMockRecorder) ListPagingMemberBeforeExpiredAt(_type, id, expiredAt, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingMemberBeforeExpiredAt", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListPagingMemberBeforeExpiredAt), _type, id, expiredAt, limit, offset)
}

// ListParentIDsBeforeExpiredAt mocks base method.
func (m *MockSubjectRelationManager) ListParentIDsBeforeExpiredAt(_type string, ids []string, expiredAt int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParentIDsBeforeExpiredAt", _type, ids, expiredAt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParentIDsBeforeExpiredAt indicates an expected call of ListParentIDsBeforeExpiredAt.
func (mr *MockSubjectRelationManagerMockRecorder) ListParentIDsBeforeExpiredAt(_type, ids, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParentIDsBeforeExpiredAt", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListParentIDsBeforeExpiredAt), _type, ids, expiredAt)
}

// ListRelation mocks base method.
func (m *MockSubjectRelationManager) ListRelation(_type, id string) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelation", _type, id)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelation indicates an expected call of ListRelation.
func (mr *MockSubjectRelationManagerMockRecorder) ListRelation(_type, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelation", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListRelation), _type, id)
}

// ListRelationBeforeExpiredAt mocks base method.
func (m *MockSubjectRelationManager) ListRelationBeforeExpiredAt(_type, id string, expiredAt int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelationBeforeExpiredAt", _type, id, expiredAt)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelationBeforeExpiredAt indicates an expected call of ListRelationBeforeExpiredAt.
func (mr *MockSubjectRelationManagerMockRecorder) ListRelationBeforeExpiredAt(_type, id, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationBeforeExpiredAt", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListRelationBeforeExpiredAt), _type, id, expiredAt)
}

// ListRelationBySubjectPK mocks base method.
func (m *MockSubjectRelationManager) ListRelationBySubjectPK(subjectPK int64) ([]dao.SubjectRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelationBySubjectPK", subjectPK)
	ret0, _ := ret[0].([]dao.SubjectRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelationBySubjectPK indicates an expected call of ListRelationBySubjectPK.
func (mr *MockSubjectRelationManagerMockRecorder) ListRelationBySubjectPK(subjectPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelationBySubjectPK", reflect.TypeOf((*MockSubjectRelationManager)(nil).ListRelationBySubjectPK), subjectPK)
}

// UpdateExpiredAt mocks base method.
func (m *MockSubjectRelationManager) UpdateExpiredAt(relations []dao.SubjectRelationPKPolicyExpiredAt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpiredAt", relations)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpiredAt indicates an expected call of UpdateExpiredAt.
func (mr *MockSubjectRelationManagerMockRecorder) UpdateExpiredAt(relations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpiredAt", reflect.TypeOf((*MockSubjectRelationManager)(nil).UpdateExpiredAt), relations)
}
