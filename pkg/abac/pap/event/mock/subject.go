// Code generated by MockGen. DO NOT EDIT.
// Source: subject.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/service/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubjectEventProducer is a mock of SubjectEventProducer interface.
type MockSubjectEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectEventProducerMockRecorder
}

// MockSubjectEventProducerMockRecorder is the mock recorder for MockSubjectEventProducer.
type MockSubjectEventProducerMockRecorder struct {
	mock *MockSubjectEventProducer
}

// NewMockSubjectEventProducer creates a new mock instance.
func NewMockSubjectEventProducer(ctrl *gomock.Controller) *MockSubjectEventProducer {
	mock := &MockSubjectEventProducer{ctrl: ctrl}
	mock.recorder = &MockSubjectEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectEventProducer) EXPECT() *MockSubjectEventProducerMockRecorder {
	return m.recorder
}

// PublishDeleteEvent mocks base method.
func (m *MockSubjectEventProducer) PublishDeleteEvent(deleteSubjects []types.Subject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishDeleteEvent", deleteSubjects)
}

// PublishDeleteEvent indicates an expected call of PublishDeleteEvent.
func (mr *MockSubjectEventProducerMockRecorder) PublishDeleteEvent(deleteSubjects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDeleteEvent", reflect.TypeOf((*MockSubjectEventProducer)(nil).PublishDeleteEvent), deleteSubjects)
}
