// Code generated by MockGen. DO NOT EDIT.
// Source: group.go

// Package mock is a generated GoMock package.
package mock

import (
	pap "iam/pkg/abac/pap"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGroupController is a mock of GroupController interface.
type MockGroupController struct {
	ctrl     *gomock.Controller
	recorder *MockGroupControllerMockRecorder
}

// MockGroupControllerMockRecorder is the mock recorder for MockGroupController.
type MockGroupControllerMockRecorder struct {
	mock *MockGroupController
}

// NewMockGroupController creates a new mock instance.
func NewMockGroupController(ctrl *gomock.Controller) *MockGroupController {
	mock := &MockGroupController{ctrl: ctrl}
	mock.recorder = &MockGroupControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupController) EXPECT() *MockGroupControllerMockRecorder {
	return m.recorder
}

// CheckSubjectEffectGroups mocks base method.
func (m *MockGroupController) CheckSubjectEffectGroups(_type, id string, inherit bool, groupIDs []string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSubjectEffectGroups", _type, id, inherit, groupIDs)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSubjectEffectGroups indicates an expected call of CheckSubjectEffectGroups.
func (mr *MockGroupControllerMockRecorder) CheckSubjectEffectGroups(_type, id, inherit, groupIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSubjectEffectGroups", reflect.TypeOf((*MockGroupController)(nil).CheckSubjectEffectGroups), _type, id, inherit, groupIDs)
}

// CreateOrUpdateGroupMembers mocks base method.
func (m *MockGroupController) CreateOrUpdateGroupMembers(_type, id string, members []pap.GroupMember) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateGroupMembers", _type, id, members)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateGroupMembers indicates an expected call of CreateOrUpdateGroupMembers.
func (mr *MockGroupControllerMockRecorder) CreateOrUpdateGroupMembers(_type, id, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateGroupMembers", reflect.TypeOf((*MockGroupController)(nil).CreateOrUpdateGroupMembers), _type, id, members)
}

// DeleteGroupMembers mocks base method.
func (m *MockGroupController) DeleteGroupMembers(_type, id string, members []pap.Subject) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupMembers", _type, id, members)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupMembers indicates an expected call of DeleteGroupMembers.
func (mr *MockGroupControllerMockRecorder) DeleteGroupMembers(_type, id, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupMembers", reflect.TypeOf((*MockGroupController)(nil).DeleteGroupMembers), _type, id, members)
}

// FilterGroupsHasMemberBeforeExpiredAt mocks base method.
func (m *MockGroupController) FilterGroupsHasMemberBeforeExpiredAt(subjects []pap.Subject, expiredAt int64) ([]pap.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterGroupsHasMemberBeforeExpiredAt", subjects, expiredAt)
	ret0, _ := ret[0].([]pap.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterGroupsHasMemberBeforeExpiredAt indicates an expected call of FilterGroupsHasMemberBeforeExpiredAt.
func (mr *MockGroupControllerMockRecorder) FilterGroupsHasMemberBeforeExpiredAt(subjects, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterGroupsHasMemberBeforeExpiredAt", reflect.TypeOf((*MockGroupController)(nil).FilterGroupsHasMemberBeforeExpiredAt), subjects, expiredAt)
}

// GetGroupMemberCount mocks base method.
func (m *MockGroupController) GetGroupMemberCount(_type, id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMemberCount", _type, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMemberCount indicates an expected call of GetGroupMemberCount.
func (mr *MockGroupControllerMockRecorder) GetGroupMemberCount(_type, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMemberCount", reflect.TypeOf((*MockGroupController)(nil).GetGroupMemberCount), _type, id)
}

// GetSubjectGroupCountBeforeExpireAt mocks base method.
func (m *MockGroupController) GetSubjectGroupCountBeforeExpireAt(_type, id string, beforeExpiredAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectGroupCountBeforeExpireAt", _type, id, beforeExpiredAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectGroupCountBeforeExpireAt indicates an expected call of GetSubjectGroupCountBeforeExpireAt.
func (mr *MockGroupControllerMockRecorder) GetSubjectGroupCountBeforeExpireAt(_type, id, beforeExpiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectGroupCountBeforeExpireAt", reflect.TypeOf((*MockGroupController)(nil).GetSubjectGroupCountBeforeExpireAt), _type, id, beforeExpiredAt)
}

// GetGroupMemberCountBeforeExpiredAt mocks base method.
func (m *MockGroupController) GetGroupMemberCountBeforeExpiredAt(_type, id string, expiredAt int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMemberCountBeforeExpiredAt", _type, id, expiredAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMemberCountBeforeExpiredAt indicates an expected call of GetGroupMemberCountBeforeExpiredAt.
func (mr *MockGroupControllerMockRecorder) GetGroupMemberCountBeforeExpiredAt(_type, id, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMemberCountBeforeExpiredAt", reflect.TypeOf((*MockGroupController)(nil).GetGroupMemberCountBeforeExpiredAt), _type, id, expiredAt)
}

// ListPagingGroupMember mocks base method.
func (m *MockGroupController) ListPagingGroupMember(_type, id string, limit, offset int64) ([]pap.GroupMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingGroupMember", _type, id, limit, offset)
	ret0, _ := ret[0].([]pap.GroupMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingGroupMember indicates an expected call of ListPagingGroupMember.
func (mr *MockGroupControllerMockRecorder) ListPagingGroupMember(_type, id, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingGroupMember", reflect.TypeOf((*MockGroupController)(nil).ListPagingGroupMember), _type, id, limit, offset)
}

// ListPagingGroupMemberBeforeExpiredAt mocks base method.
func (m *MockGroupController) ListPagingGroupMemberBeforeExpiredAt(_type, id string, expiredAt, limit, offset int64) ([]pap.GroupMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingGroupMemberBeforeExpiredAt", _type, id, expiredAt, limit, offset)
	ret0, _ := ret[0].([]pap.GroupMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingGroupMemberBeforeExpiredAt indicates an expected call of ListPagingGroupMemberBeforeExpiredAt.
func (mr *MockGroupControllerMockRecorder) ListPagingGroupMemberBeforeExpiredAt(_type, id, expiredAt, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingGroupMemberBeforeExpiredAt", reflect.TypeOf((*MockGroupController)(nil).ListPagingGroupMemberBeforeExpiredAt), _type, id, expiredAt, limit, offset)
}

// ListPagingSubjectGroups mocks base method.
func (m *MockGroupController) ListPagingSubjectGroups(_type, id string, beforeExpiredAt, limit, offset int64) ([]pap.SubjectGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagingSubjectGroups", _type, id, beforeExpiredAt, limit, offset)
	ret0, _ := ret[0].([]pap.SubjectGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagingSubjectGroups indicates an expected call of ListPagingSubjectGroups.
func (mr *MockGroupControllerMockRecorder) ListPagingSubjectGroups(_type, id, beforeExpiredAt, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagingSubjectGroups", reflect.TypeOf((*MockGroupController)(nil).ListPagingSubjectGroups), _type, id, beforeExpiredAt, limit, offset)
}

// UpdateGroupMembersExpiredAt mocks base method.
func (m *MockGroupController) UpdateGroupMembersExpiredAt(_type, id string, members []pap.GroupMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupMembersExpiredAt", _type, id, members)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupMembersExpiredAt indicates an expected call of UpdateGroupMembersExpiredAt.
func (mr *MockGroupControllerMockRecorder) UpdateGroupMembersExpiredAt(_type, id, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupMembersExpiredAt", reflect.TypeOf((*MockGroupController)(nil).UpdateGroupMembersExpiredAt), _type, id, members)
}
