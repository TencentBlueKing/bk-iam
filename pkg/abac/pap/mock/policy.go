// Code generated by MockGen. DO NOT EDIT.
// Source: policy.go

// Package mock is a generated GoMock package.
package mock

import (
	types "iam/pkg/abac/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPolicyController is a mock of PolicyController interface.
type MockPolicyController struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyControllerMockRecorder
}

// MockPolicyControllerMockRecorder is the mock recorder for MockPolicyController.
type MockPolicyControllerMockRecorder struct {
	mock *MockPolicyController
}

// NewMockPolicyController creates a new mock instance.
func NewMockPolicyController(ctrl *gomock.Controller) *MockPolicyController {
	mock := &MockPolicyController{ctrl: ctrl}
	mock.recorder = &MockPolicyControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyController) EXPECT() *MockPolicyControllerMockRecorder {
	return m.recorder
}

// AlterCustomPolicies mocks base method.
func (m *MockPolicyController) AlterCustomPolicies(system, subjectType, subjectID string, createPolicies, updatePolicies []types.Policy, deletePolicyIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterCustomPolicies", system, subjectType, subjectID, createPolicies, updatePolicies, deletePolicyIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterCustomPolicies indicates an expected call of AlterCustomPolicies.
func (mr *MockPolicyControllerMockRecorder) AlterCustomPolicies(system, subjectType, subjectID, createPolicies, updatePolicies, deletePolicyIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterCustomPolicies", reflect.TypeOf((*MockPolicyController)(nil).AlterCustomPolicies), system, subjectType, subjectID, createPolicies, updatePolicies, deletePolicyIDs)
}

// CreateTemporaryPolicies mocks base method.
func (m *MockPolicyController) CreateTemporaryPolicies(system, subjectType, subjectID string, policies []types.Policy) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemporaryPolicies", system, subjectType, subjectID, policies)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporaryPolicies indicates an expected call of CreateTemporaryPolicies.
func (mr *MockPolicyControllerMockRecorder) CreateTemporaryPolicies(system, subjectType, subjectID, policies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporaryPolicies", reflect.TypeOf((*MockPolicyController)(nil).CreateTemporaryPolicies), system, subjectType, subjectID, policies)
}

// DeleteByIDs mocks base method.
func (m *MockPolicyController) DeleteByIDs(system, subjectType, subjectID string, policyIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDs", system, subjectType, subjectID, policyIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDs indicates an expected call of DeleteByIDs.
func (mr *MockPolicyControllerMockRecorder) DeleteByIDs(system, subjectType, subjectID, policyIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDs", reflect.TypeOf((*MockPolicyController)(nil).DeleteByIDs), system, subjectType, subjectID, policyIDs)
}

// DeleteTemporaryBeforeExpiredAt mocks base method.
func (m *MockPolicyController) DeleteTemporaryBeforeExpiredAt(expiredAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemporaryBeforeExpiredAt", expiredAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemporaryBeforeExpiredAt indicates an expected call of DeleteTemporaryBeforeExpiredAt.
func (mr *MockPolicyControllerMockRecorder) DeleteTemporaryBeforeExpiredAt(expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemporaryBeforeExpiredAt", reflect.TypeOf((*MockPolicyController)(nil).DeleteTemporaryBeforeExpiredAt), expiredAt)
}

// DeleteTemporaryByIDs mocks base method.
func (m *MockPolicyController) DeleteTemporaryByIDs(system, subjectType, subjectID string, policyIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemporaryByIDs", system, subjectType, subjectID, policyIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemporaryByIDs indicates an expected call of DeleteTemporaryByIDs.
func (mr *MockPolicyControllerMockRecorder) DeleteTemporaryByIDs(system, subjectType, subjectID, policyIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemporaryByIDs", reflect.TypeOf((*MockPolicyController)(nil).DeleteTemporaryByIDs), system, subjectType, subjectID, policyIDs)
}

// ListSaaSBySubjectSystemTemplate mocks base method.
func (m *MockPolicyController) ListSaaSBySubjectSystemTemplate(system, subjectType, subjectID string, templateID int64) ([]types.SaaSPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSaaSBySubjectSystemTemplate", system, subjectType, subjectID, templateID)
	ret0, _ := ret[0].([]types.SaaSPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSaaSBySubjectSystemTemplate indicates an expected call of ListSaaSBySubjectSystemTemplate.
func (mr *MockPolicyControllerMockRecorder) ListSaaSBySubjectSystemTemplate(system, subjectType, subjectID, templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSaaSBySubjectSystemTemplate", reflect.TypeOf((*MockPolicyController)(nil).ListSaaSBySubjectSystemTemplate), system, subjectType, subjectID, templateID)
}

// ListSaaSBySubjectTemplateBeforeExpiredAt mocks base method.
func (m *MockPolicyController) ListSaaSBySubjectTemplateBeforeExpiredAt(subjectType, subjectID string, templateID, expiredAt int64) ([]types.SaaSPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSaaSBySubjectTemplateBeforeExpiredAt", subjectType, subjectID, templateID, expiredAt)
	ret0, _ := ret[0].([]types.SaaSPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSaaSBySubjectTemplateBeforeExpiredAt indicates an expected call of ListSaaSBySubjectTemplateBeforeExpiredAt.
func (mr *MockPolicyControllerMockRecorder) ListSaaSBySubjectTemplateBeforeExpiredAt(subjectType, subjectID, templateID, expiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSaaSBySubjectTemplateBeforeExpiredAt", reflect.TypeOf((*MockPolicyController)(nil).ListSaaSBySubjectTemplateBeforeExpiredAt), subjectType, subjectID, templateID, expiredAt)
}
