// Code generated by MockGen. DO NOT EDIT.
// Source: open.go

// Package mock is a generated GoMock package.
package mock

import (
	prp "iam/pkg/abac/prp"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenPolicyManager is a mock of OpenPolicyManager interface.
type MockOpenPolicyManager struct {
	ctrl     *gomock.Controller
	recorder *MockOpenPolicyManagerMockRecorder
}

// MockOpenPolicyManagerMockRecorder is the mock recorder for MockOpenPolicyManager.
type MockOpenPolicyManagerMockRecorder struct {
	mock *MockOpenPolicyManager
}

// NewMockOpenPolicyManager creates a new mock instance.
func NewMockOpenPolicyManager(ctrl *gomock.Controller) *MockOpenPolicyManager {
	mock := &MockOpenPolicyManager{ctrl: ctrl}
	mock.recorder = &MockOpenPolicyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenPolicyManager) EXPECT() *MockOpenPolicyManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOpenPolicyManager) Get(_type string, pk int64) (prp.OpenPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", _type, pk)
	ret0, _ := ret[0].(prp.OpenPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOpenPolicyManagerMockRecorder) Get(_type, pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOpenPolicyManager)(nil).Get), _type, pk)
}

// List mocks base method.
func (m *MockOpenPolicyManager) List(_type string, actionPK, expiredAt, offset, limit int64) (int64, []prp.OpenPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", _type, actionPK, expiredAt, offset, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]prp.OpenPolicy)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOpenPolicyManagerMockRecorder) List(_type, actionPK, expiredAt, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOpenPolicyManager)(nil).List), _type, actionPK, expiredAt, offset, limit)
}

// ListSubjects mocks base method.
func (m *MockOpenPolicyManager) ListSubjects(_type, systemID string, pks []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjects", _type, systemID, pks)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjects indicates an expected call of ListSubjects.
func (mr *MockOpenPolicyManagerMockRecorder) ListSubjects(_type, systemID, pks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjects", reflect.TypeOf((*MockOpenPolicyManager)(nil).ListSubjects), _type, systemID, pks)
}
